 if (start >= end) {
            return;
        }
       int mid = partition(arr, start, end);
       quickSort(arr, start, mid-1);
       quickSort(arr, mid+1, end);
    }
    private static int partition(int[] arr, int start, int end) {
        int pivot = arr[end];
        int left = start;
        int right = end;
        while (left < right) {
            while (arr[left] <= pivot && left < right) {
                left++;
            }
            while (arr[right] >= pivot && left < right) {
                right--;
            }
            swap(arr, left, right);
        }
        swap(arr, left, end);
        return left;
    }
       public static void swap(int[] arr, int index1, int index2) {
        int temp = arr[index1];
        arr[index1] = arr[index2];
        arr[index2] = temp;