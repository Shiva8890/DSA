public static void mergeSort(int[] arr , int start , int end) {
     if (start < end) {
            int mid = (start + end) / 2;
            mergeSort(arr, start, mid);
            mergeSort(arr, mid + 1, end);
            merge(arr, start, mid, end);
        }

    }
    private static void merge(int[] arr, int start, int mid, int end) {
        int n1 = mid-start+1;
        int n2 = end - mid;

        int[] subArr1 = new int[n1];
        int[] subArr2 = new int[n2];

        for (int x = 0; x < n1; x++)
            subArr1[x] = arr[start + x];

        for (int y = 0; y < n2; y++)
            subArr2[y] = arr[mid + 1 + y];

        int i=0, j=0, k=start;
    while (i < n1 && j < n2) {
            if (subArr1[i] <= subArr2[j]) {
                arr[k++] = subArr1[i++];
            } else {
                arr[k++] = subArr2[j++];
            }
        }
        while (i < n1)
            arr[k++] = subArr1[i++];
        while (j < n2)
            arr[k++] = subArr2[j++];
    }